{"version":3,"sources":["components/GamePiece/GamePiece.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["GamePiece","props","s","m","l","onClick","clickHandler","icon","iconName","className","correct","Nav","window","clearTimeout","this","timeout","gameWon","message","clear","undefined","setTimeout","renderMessage","key","Math","random","score","highScore","Component","App","state","icons","faSmile","faFrown","faBell","faCalendar","faEnvelope","faEnvelopeOpen","faNewspaper","faSnowflake","faBellSlash","faCompass","faEye","faFileAlt","sort","randomize","clicked","a","b","indexOf","length","setState","max","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f188e8b1.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { Col, CardPanel } from 'react-materialize';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './GamePiece.css'\n\nconst GamePiece = props => (\n    <Col s={12} m={4} l={3}>\n        <CardPanel onClick={() => props.clickHandler(props.icon.iconName)} className={\"hoverable teal lighten-4 black-text center\" + (props.correct === false ? \" shake\" : \"\")}>\n            <FontAwesomeIcon icon={props.icon} />\n        </CardPanel>\n    </Col>\n)\n\nexport default GamePiece","import React, { Component } from 'react'\nimport './Nav.css'\n\nclass Nav extends Component {\n    componentWillUnmount() {\n        window.clearTimeout(this.timeout)\n    }\n\n    renderMessage(correct, gameWon, clear = false) {\n        let message, className\n        if(clear) {\n            className = ''\n        }\n        else if (correct === undefined) {\n            message = 'Click an image to begin'\n            className = ''\n        } else {\n            message = gameWon ? 'You won the game!!!' : (correct ? 'You guessed correctly!' : 'You guessed incorrectly')\n            className = correct ? 'correct' : 'incorrect'\n        }\n\n        window.clearTimeout(this.timeout)\n        if (!clear & correct !== undefined) {\n            this.timeout = window.setTimeout(this.renderMessage, gameWon ? 3000 : 1000, gameWon ? undefined : correct, false, true)\n        }\n        return <li key={Math.random()} className={className}>{message}</li>\n    }\n\n    render() {\n        return (\n            <nav className=\"pinned\">\n                <div>\n                    <ul className=\"center navList\">\n                        <li className=\"logo\">Clicky Game</li>\n                        {this.renderMessage(this.props.correct, this.props.gameWon)}\n                        <li>Score: {this.props.score} | High Score: {this.props.highScore}</li>\n                    </ul>\n                </div>\n            </nav>\n\n        )\n    }\n}\n\nexport default Nav","import React, { Component } from 'react';\nimport { Row, CardPanel, Col } from 'react-materialize';\nimport { faSmile, faFrown, faBell, faCalendar, faEnvelope, faEnvelopeOpen, faNewspaper, faSnowflake, faBellSlash, faCompass, faEye, faFileAlt } from '@fortawesome/free-regular-svg-icons'\nimport GamePiece from './components/GamePiece';\nimport Nav from './components/Nav/Nav';\n\nclass App extends Component {\n    state = {\n        icons: [faSmile, faFrown, faBell, faCalendar, faEnvelope, faEnvelopeOpen, faNewspaper, faSnowflake, faBellSlash, faCompass, faEye, faFileAlt].sort(this.randomize),\n        clicked: [],\n        score: 0,\n        highScore: 0,\n        correct: undefined,\n        gameWon: false\n    }\n\n    randomize = (a, b) => Math.random() > .5 ? -1 : 1\n\n    clickHandler = iconName => {\n        if (this.state.clicked.indexOf(iconName) === -1) {\n            let score = this.state.clicked.length + 1,\n                clicked = score === this.state.icons.length ? [] : [...this.state.clicked, iconName]\n\n            this.setState({\n                icons: this.state.icons.sort(this.randomize),\n                clicked: clicked,\n                score: score,\n                highScore: Math.max(this.state.highScore, score),\n                correct: true,\n                gameWon: score === this.state.icons.length\n            })\n        } else {\n            this.setState({\n                icons: this.state.icons.sort(this.randomize),\n                clicked: [],\n                score: 0,\n                correct: false,\n                gameWon: false\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container-fluid\">\n                    <Nav correct={this.state.correct} gameWon={this.state.gameWon} score={this.state.score} highScore={this.state.highScore} />\n                    <Row>\n                        <Col s={12}>\n                            <CardPanel>\n                                <p>Click on an image to earn points, but don't click on any more than once!</p>\n                            </CardPanel>\n                        </Col>\n                    </Row>\n                </div>\n                <div className=\"container\">\n                    <Row>\n                        {this.state.icons.map(icon => <GamePiece correct={this.state.correct} key={icon.iconName} icon={icon} clickHandler={this.clickHandler} />)}\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}